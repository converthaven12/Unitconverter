// Unit Registry System - Comprehensive unit definitions with base-unit conversion model

export interface Unit {
  id: string
  name: string
  symbol: string
  category: string
  toBase: (value: number) => number
  fromBase: (value: number) => number
  aliases?: string[]
}

export interface Category {
  id: string
  name: string
  baseUnit: string
  description: string
}

// Temperature conversion helpers (offset-aware)
const celsiusToKelvin = (c: number) => c + 273.15
const kelvinToCelsius = (k: number) => k - 273.15
const fahrenheitToKelvin = (f: number) => ((f - 32) * 5) / 9 + 273.15
const kelvinToFahrenheit = (k: number) => ((k - 273.15) * 9) / 5 + 32

// Categories definition
export const categories: Category[] = [
  { id: "length", name: "Length", baseUnit: "meter", description: "Distance and length measurements" },
  { id: "area", name: "Area", baseUnit: "square_meter", description: "Surface area measurements" },
  { id: "volume", name: "Volume", baseUnit: "liter", description: "Volume and capacity measurements" },
  { id: "weight", name: "Weight & Mass", baseUnit: "kilogram", description: "Mass and weight measurements" },
  { id: "temperature", name: "Temperature", baseUnit: "celsius", description: "Temperature measurements" },
  { id: "time", name: "Time", baseUnit: "second", description: "Time duration measurements" },
  { id: "speed", name: "Speed", baseUnit: "meter_per_second", description: "Velocity and speed measurements" },
  { id: "pressure", name: "Pressure", baseUnit: "pascal", description: "Pressure measurements" },
  { id: "energy", name: "Energy", baseUnit: "joule", description: "Energy measurements" },
  { id: "power", name: "Power", baseUnit: "watt", description: "Power measurements" },
  { id: "data", name: "Data Storage", baseUnit: "byte", description: "Digital storage measurements" },
  { id: "angle", name: "Angle", baseUnit: "degree", description: "Angular measurements" },
  { id: "frequency", name: "Frequency", baseUnit: "hertz", description: "Frequency measurements" },
  { id: "fuel", name: "Fuel Economy", baseUnit: "liter_per_100km", description: "Fuel consumption measurements" },
  { id: "flow", name: "Flow Rate", baseUnit: "liter_per_second", description: "Flow rate measurements" },
  { id: "density", name: "Density", baseUnit: "kilogram_per_cubic_meter", description: "Density measurements" },
  { id: "force", name: "Force", baseUnit: "newton", description: "Force measurements" },
  { id: "torque", name: "Torque", baseUnit: "newton_meter", description: "Torque measurements" },
  {
    id: "acceleration",
    name: "Acceleration",
    baseUnit: "meter_per_second_squared",
    description: "Acceleration measurements",
  },
  { id: "illuminance", name: "Illuminance", baseUnit: "lux", description: "Light measurements" },
  { id: "luminance", name: "Luminance", baseUnit: "candela_per_square_meter", description: "Luminance measurements" },
  { id: "radioactivity", name: "Radioactivity", baseUnit: "becquerel", description: "Radioactivity measurements" },
  { id: "sound", name: "Sound", baseUnit: "decibel_spl", description: "Sound level measurements" },
  { id: "electrical", name: "Electrical", baseUnit: "ampere", description: "Electrical measurements" },
  { id: "magnetic", name: "Magnetic", baseUnit: "tesla", description: "Magnetic field measurements" },
  { id: "viscosity", name: "Viscosity", baseUnit: "pascal_second", description: "Viscosity measurements" },
  { id: "currency", name: "Currency", baseUnit: "usd", description: "World currency exchange rates" },
]

// Comprehensive units registry
export const units: Unit[] = [
  // Length
  { id: "meter", name: "Meter", symbol: "m", category: "length", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilometer",
    name: "Kilometer",
    symbol: "km",
    category: "length",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "centimeter",
    name: "Centimeter",
    symbol: "cm",
    category: "length",
    toBase: (v) => v / 100,
    fromBase: (v) => v * 100,
  },
  {
    id: "millimeter",
    name: "Millimeter",
    symbol: "mm",
    category: "length",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  {
    id: "micrometer",
    name: "Micrometer",
    symbol: "μm",
    category: "length",
    toBase: (v) => v / 1000000,
    fromBase: (v) => v * 1000000,
  },
  {
    id: "nanometer",
    name: "Nanometer",
    symbol: "nm",
    category: "length",
    toBase: (v) => v / 1000000000,
    fromBase: (v) => v * 1000000000,
  },
  {
    id: "inch",
    name: "Inch",
    symbol: "in",
    category: "length",
    toBase: (v) => v * 0.0254,
    fromBase: (v) => v / 0.0254,
  },
  {
    id: "foot",
    name: "Foot",
    symbol: "ft",
    category: "length",
    toBase: (v) => v * 0.3048,
    fromBase: (v) => v / 0.3048,
  },
  {
    id: "yard",
    name: "Yard",
    symbol: "yd",
    category: "length",
    toBase: (v) => v * 0.9144,
    fromBase: (v) => v / 0.9144,
  },
  {
    id: "mile",
    name: "Mile",
    symbol: "mi",
    category: "length",
    toBase: (v) => v * 1609.344,
    fromBase: (v) => v / 1609.344,
  },
  {
    id: "nautical_mile",
    name: "Nautical Mile",
    symbol: "nmi",
    category: "length",
    toBase: (v) => v * 1852,
    fromBase: (v) => v / 1852,
  },
  {
    id: "light_year",
    name: "Light Year",
    symbol: "ly",
    category: "length",
    toBase: (v) => v * 9.461e15,
    fromBase: (v) => v / 9.461e15,
  },

  // Area
  { id: "square_meter", name: "Square Meter", symbol: "m²", category: "area", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "square_kilometer",
    name: "Square Kilometer",
    symbol: "km²",
    category: "area",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "square_centimeter",
    name: "Square Centimeter",
    symbol: "cm²",
    category: "area",
    toBase: (v) => v / 10000,
    fromBase: (v) => v * 10000,
  },
  {
    id: "square_millimeter",
    name: "Square Millimeter",
    symbol: "mm²",
    category: "area",
    toBase: (v) => v / 1000000,
    fromBase: (v) => v * 1000000,
  },
  {
    id: "square_inch",
    name: "Square Inch",
    symbol: "in²",
    category: "area",
    toBase: (v) => v * 0.00064516,
    fromBase: (v) => v / 0.00064516,
  },
  {
    id: "square_foot",
    name: "Square Foot",
    symbol: "ft²",
    category: "area",
    toBase: (v) => v * 0.092903,
    fromBase: (v) => v / 0.092903,
  },
  {
    id: "square_yard",
    name: "Square Yard",
    symbol: "yd²",
    category: "area",
    toBase: (v) => v * 0.836127,
    fromBase: (v) => v / 0.836127,
  },
  {
    id: "acre",
    name: "Acre",
    symbol: "ac",
    category: "area",
    toBase: (v) => v * 4046.86,
    fromBase: (v) => v / 4046.86,
  },
  {
    id: "hectare",
    name: "Hectare",
    symbol: "ha",
    category: "area",
    toBase: (v) => v * 10000,
    fromBase: (v) => v / 10000,
  },

  // Volume
  { id: "liter", name: "Liter", symbol: "L", category: "volume", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "milliliter",
    name: "Milliliter",
    symbol: "mL",
    category: "volume",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  {
    id: "cubic_meter",
    name: "Cubic Meter",
    symbol: "m³",
    category: "volume",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "cubic_centimeter",
    name: "Cubic Centimeter",
    symbol: "cm³",
    category: "volume",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  {
    id: "gallon_us",
    name: "Gallon (US)",
    symbol: "gal US",
    category: "volume",
    toBase: (v) => v * 3.78541,
    fromBase: (v) => v / 3.78541,
  },
  {
    id: "gallon_uk",
    name: "Gallon (UK)",
    symbol: "gal UK",
    category: "volume",
    toBase: (v) => v * 4.54609,
    fromBase: (v) => v / 4.54609,
  },
  {
    id: "quart_us",
    name: "Quart (US)",
    symbol: "qt US",
    category: "volume",
    toBase: (v) => v * 0.946353,
    fromBase: (v) => v / 0.946353,
  },
  {
    id: "pint_us",
    name: "Pint (US)",
    symbol: "pt US",
    category: "volume",
    toBase: (v) => v * 0.473176,
    fromBase: (v) => v / 0.473176,
  },
  {
    id: "cup_us",
    name: "Cup (US)",
    symbol: "cup US",
    category: "volume",
    toBase: (v) => v * 0.236588,
    fromBase: (v) => v / 0.236588,
  },
  {
    id: "fluid_ounce_us",
    name: "Fluid Ounce (US)",
    symbol: "fl oz US",
    category: "volume",
    toBase: (v) => v * 0.0295735,
    fromBase: (v) => v / 0.0295735,
  },
  {
    id: "tablespoon",
    name: "Tablespoon",
    symbol: "tbsp",
    category: "volume",
    toBase: (v) => v * 0.0147868,
    fromBase: (v) => v / 0.0147868,
  },
  {
    id: "teaspoon",
    name: "Teaspoon",
    symbol: "tsp",
    category: "volume",
    toBase: (v) => v * 0.00492892,
    fromBase: (v) => v / 0.00492892,
  },

  // Weight/Mass
  { id: "kilogram", name: "Kilogram", symbol: "kg", category: "weight", toBase: (v) => v, fromBase: (v) => v },
  { id: "gram", name: "Gram", symbol: "g", category: "weight", toBase: (v) => v / 1000, fromBase: (v) => v * 1000 },
  {
    id: "milligram",
    name: "Milligram",
    symbol: "mg",
    category: "weight",
    toBase: (v) => v / 1000000,
    fromBase: (v) => v * 1000000,
  },
  {
    id: "microgram",
    name: "Microgram",
    symbol: "μg",
    category: "weight",
    toBase: (v) => v / 1000000000,
    fromBase: (v) => v * 1000000000,
  },
  { id: "tonne", name: "Tonne", symbol: "t", category: "weight", toBase: (v) => v * 1000, fromBase: (v) => v / 1000 },
  {
    id: "pound",
    name: "Pound",
    symbol: "lb",
    category: "weight",
    toBase: (v) => v * 0.453592,
    fromBase: (v) => v / 0.453592,
  },
  {
    id: "ounce",
    name: "Ounce",
    symbol: "oz",
    category: "weight",
    toBase: (v) => v * 0.0283495,
    fromBase: (v) => v / 0.0283495,
  },
  {
    id: "stone",
    name: "Stone",
    symbol: "st",
    category: "weight",
    toBase: (v) => v * 6.35029,
    fromBase: (v) => v / 6.35029,
  },
  {
    id: "ton_us",
    name: "Ton (US)",
    symbol: "ton US",
    category: "weight",
    toBase: (v) => v * 907.185,
    fromBase: (v) => v / 907.185,
  },
  {
    id: "ton_uk",
    name: "Ton (UK)",
    symbol: "ton UK",
    category: "weight",
    toBase: (v) => v * 1016.05,
    fromBase: (v) => v / 1016.05,
  },

  // Temperature (offset-aware conversions)
  { id: "kelvin", name: "Kelvin", symbol: "K", category: "temperature", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "celsius",
    name: "Celsius",
    symbol: "°C",
    category: "temperature",
    toBase: celsiusToKelvin,
    fromBase: kelvinToCelsius,
  },
  {
    id: "fahrenheit",
    name: "Fahrenheit",
    symbol: "°F",
    category: "temperature",
    toBase: fahrenheitToKelvin,
    fromBase: (v) => ((v - 273.15) * 9) / 5 + 32,
  },
  {
    id: "rankine",
    name: "Rankine",
    symbol: "°R",
    category: "temperature",
    toBase: (v) => (v * 5) / 9,
    fromBase: (v) => (v * 9) / 5,
  },

  // Time
  { id: "second", name: "Second", symbol: "s", category: "time", toBase: (v) => v, fromBase: (v) => v },
  { id: "minute", name: "Minute", symbol: "min", category: "time", toBase: (v) => v * 60, fromBase: (v) => v / 60 },
  { id: "hour", name: "Hour", symbol: "h", category: "time", toBase: (v) => v * 3600, fromBase: (v) => v / 3600 },
  { id: "day", name: "Day", symbol: "d", category: "time", toBase: (v) => v * 86400, fromBase: (v) => v / 86400 },
  { id: "week", name: "Week", symbol: "wk", category: "time", toBase: (v) => v * 604800, fromBase: (v) => v / 604800 },
  {
    id: "month",
    name: "Month",
    symbol: "mo",
    category: "time",
    toBase: (v) => v * 2629746,
    fromBase: (v) => v / 2629746,
  },
  {
    id: "year",
    name: "Year",
    symbol: "yr",
    category: "time",
    toBase: (v) => v * 31556952,
    fromBase: (v) => v / 31556952,
  },
  {
    id: "millisecond",
    name: "Millisecond",
    symbol: "ms",
    category: "time",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  {
    id: "microsecond",
    name: "Microsecond",
    symbol: "μs",
    category: "time",
    toBase: (v) => v / 1000000,
    fromBase: (v) => v * 1000000,
  },
  {
    id: "nanosecond",
    name: "Nanosecond",
    symbol: "ns",
    category: "time",
    toBase: (v) => v / 1000000000,
    fromBase: (v) => v * 1000000000,
  },

  // Speed
  {
    id: "meter_per_second",
    name: "Meter per Second",
    symbol: "m/s",
    category: "speed",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "kilometer_per_hour",
    name: "Kilometer per Hour",
    symbol: "km/h",
    category: "speed",
    toBase: (v) => v / 3.6,
    fromBase: (v) => v * 3.6,
  },
  {
    id: "mile_per_hour",
    name: "Mile per Hour",
    symbol: "mph",
    category: "speed",
    toBase: (v) => v * 0.44704,
    fromBase: (v) => v / 0.44704,
  },
  {
    id: "foot_per_second",
    name: "Foot per Second",
    symbol: "ft/s",
    category: "speed",
    toBase: (v) => v * 0.3048,
    fromBase: (v) => v / 0.3048,
  },
  {
    id: "knot",
    name: "Knot",
    symbol: "kn",
    category: "speed",
    toBase: (v) => v * 0.514444,
    fromBase: (v) => v / 0.514444,
  },
  { id: "mach", name: "Mach", symbol: "Ma", category: "speed", toBase: (v) => v * 343, fromBase: (v) => v / 343 },

  // Pressure
  { id: "pascal", name: "Pascal", symbol: "Pa", category: "pressure", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilopascal",
    name: "Kilopascal",
    symbol: "kPa",
    category: "pressure",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megapascal",
    name: "Megapascal",
    symbol: "MPa",
    category: "pressure",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "bar",
    name: "Bar",
    symbol: "bar",
    category: "pressure",
    toBase: (v) => v * 100000,
    fromBase: (v) => v / 100000,
  },
  {
    id: "millibar",
    name: "Millibar",
    symbol: "mbar",
    category: "pressure",
    toBase: (v) => v * 100,
    fromBase: (v) => v / 100,
  },
  {
    id: "atmosphere",
    name: "Atmosphere",
    symbol: "atm",
    category: "pressure",
    toBase: (v) => v * 101325,
    fromBase: (v) => v / 101325,
  },
  {
    id: "psi",
    name: "Pound per Square Inch",
    symbol: "psi",
    category: "pressure",
    toBase: (v) => v * 6894.76,
    fromBase: (v) => v / 6894.76,
  },
  {
    id: "torr",
    name: "Torr",
    symbol: "Torr",
    category: "pressure",
    toBase: (v) => v * 133.322,
    fromBase: (v) => v / 133.322,
  },
  {
    id: "mmhg",
    name: "Millimeter of Mercury",
    symbol: "mmHg",
    category: "pressure",
    toBase: (v) => v * 133.322,
    fromBase: (v) => v / 133.322,
  },

  // Energy
  { id: "joule", name: "Joule", symbol: "J", category: "energy", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilojoule",
    name: "Kilojoule",
    symbol: "kJ",
    category: "energy",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megajoule",
    name: "Megajoule",
    symbol: "MJ",
    category: "energy",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "calorie",
    name: "Calorie",
    symbol: "cal",
    category: "energy",
    toBase: (v) => v * 4.184,
    fromBase: (v) => v / 4.184,
  },
  {
    id: "kilocalorie",
    name: "Kilocalorie",
    symbol: "kcal",
    category: "energy",
    toBase: (v) => v * 4184,
    fromBase: (v) => v / 4184,
  },
  {
    id: "watt_hour",
    name: "Watt Hour",
    symbol: "Wh",
    category: "energy",
    toBase: (v) => v * 3600,
    fromBase: (v) => v / 3600,
  },
  {
    id: "kilowatt_hour",
    name: "Kilowatt Hour",
    symbol: "kWh",
    category: "energy",
    toBase: (v) => v * 3600000,
    fromBase: (v) => v / 3600000,
  },
  {
    id: "btu",
    name: "British Thermal Unit",
    symbol: "BTU",
    category: "energy",
    toBase: (v) => v * 1055.06,
    fromBase: (v) => v / 1055.06,
  },

  // Power
  { id: "watt", name: "Watt", symbol: "W", category: "power", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilowatt",
    name: "Kilowatt",
    symbol: "kW",
    category: "power",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megawatt",
    name: "Megawatt",
    symbol: "MW",
    category: "power",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "horsepower",
    name: "Horsepower",
    symbol: "hp",
    category: "power",
    toBase: (v) => v * 745.7,
    fromBase: (v) => v / 745.7,
  },
  {
    id: "horsepower_metric",
    name: "Horsepower (Metric)",
    symbol: "PS",
    category: "power",
    toBase: (v) => v * 735.5,
    fromBase: (v) => v / 735.5,
  },

  // Data Storage (decimal and binary)
  { id: "byte", name: "Byte", symbol: "B", category: "data", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilobyte",
    name: "Kilobyte",
    symbol: "KB",
    category: "data",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megabyte",
    name: "Megabyte",
    symbol: "MB",
    category: "data",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "gigabyte",
    name: "Gigabyte",
    symbol: "GB",
    category: "data",
    toBase: (v) => v * 1000000000,
    fromBase: (v) => v / 1000000000,
  },
  {
    id: "terabyte",
    name: "Terabyte",
    symbol: "TB",
    category: "data",
    toBase: (v) => v * 1000000000000,
    fromBase: (v) => v / 1000000000000,
  },
  {
    id: "petabyte",
    name: "Petabyte",
    symbol: "PB",
    category: "data",
    toBase: (v) => v * 1000000000000000,
    fromBase: (v) => v / 1000000000000000,
  },
  {
    id: "kibibyte",
    name: "Kibibyte",
    symbol: "KiB",
    category: "data",
    toBase: (v) => v * 1024,
    fromBase: (v) => v / 1024,
  },
  {
    id: "mebibyte",
    name: "Mebibyte",
    symbol: "MiB",
    category: "data",
    toBase: (v) => v * 1048576,
    fromBase: (v) => v / 1048576,
  },
  {
    id: "gibibyte",
    name: "Gibibyte",
    symbol: "GiB",
    category: "data",
    toBase: (v) => v * 1073741824,
    fromBase: (v) => v / 1073741824,
  },
  {
    id: "tebibyte",
    name: "Tebibyte",
    symbol: "TiB",
    category: "data",
    toBase: (v) => v * 1099511627776,
    fromBase: (v) => v / 1099511627776,
  },
  { id: "bit", name: "Bit", symbol: "bit", category: "data", toBase: (v) => v / 8, fromBase: (v) => v * 8 },

  // Angle
  { id: "radian", name: "Radian", symbol: "rad", category: "angle", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "degree",
    name: "Degree",
    symbol: "°",
    category: "angle",
    toBase: (v) => (v * Math.PI) / 180,
    fromBase: (v) => (v * 180) / Math.PI,
  },
  {
    id: "gradian",
    name: "Gradian",
    symbol: "grad",
    category: "angle",
    toBase: (v) => (v * Math.PI) / 200,
    fromBase: (v) => (v * 200) / Math.PI,
  },
  {
    id: "turn",
    name: "Turn",
    symbol: "tr",
    category: "angle",
    toBase: (v) => v * 2 * Math.PI,
    fromBase: (v) => v / (2 * Math.PI),
  },

  // Frequency
  { id: "hertz", name: "Hertz", symbol: "Hz", category: "frequency", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilohertz",
    name: "Kilohertz",
    symbol: "kHz",
    category: "frequency",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megahertz",
    name: "Megahertz",
    symbol: "MHz",
    category: "frequency",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },
  {
    id: "gigahertz",
    name: "Gigahertz",
    symbol: "GHz",
    category: "frequency",
    toBase: (v) => v * 1000000000,
    fromBase: (v) => v / 1000000000,
  },

  // Fuel Economy
  {
    id: "liter_per_100km",
    name: "Liter per 100 km",
    symbol: "L/100km",
    category: "fuel",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "mpg_us",
    name: "Miles per Gallon (US)",
    symbol: "mpg US",
    category: "fuel",
    toBase: (v) => 235.214 / v,
    fromBase: (v) => 235.214 / v,
  },
  {
    id: "mpg_uk",
    name: "Miles per Gallon (UK)",
    symbol: "mpg UK",
    category: "fuel",
    toBase: (v) => 282.481 / v,
    fromBase: (v) => 282.481 / v,
  },
  {
    id: "km_per_liter",
    name: "Kilometer per Liter",
    symbol: "km/L",
    category: "fuel",
    toBase: (v) => 100 / v,
    fromBase: (v) => 100 / v,
  },

  // Additional categories with basic units
  {
    id: "cubic_meter_per_second",
    name: "Cubic Meter per Second",
    symbol: "m³/s",
    category: "flow",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "liter_per_second",
    name: "Liter per Second",
    symbol: "L/s",
    category: "flow",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  {
    id: "gallon_per_minute",
    name: "Gallon per Minute",
    symbol: "gpm",
    category: "flow",
    toBase: (v) => v * 0.0000630902,
    fromBase: (v) => v / 0.0000630902,
  },

  {
    id: "kilogram_per_cubic_meter",
    name: "Kilogram per Cubic Meter",
    symbol: "kg/m³",
    category: "density",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "gram_per_cubic_centimeter",
    name: "Gram per Cubic Centimeter",
    symbol: "g/cm³",
    category: "density",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "pound_per_cubic_foot",
    name: "Pound per Cubic Foot",
    symbol: "lb/ft³",
    category: "density",
    toBase: (v) => v * 16.0185,
    fromBase: (v) => v / 16.0185,
  },

  { id: "newton", name: "Newton", symbol: "N", category: "force", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilonewton",
    name: "Kilonewton",
    symbol: "kN",
    category: "force",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "pound_force",
    name: "Pound Force",
    symbol: "lbf",
    category: "force",
    toBase: (v) => v * 4.44822,
    fromBase: (v) => v / 4.44822,
  },
  {
    id: "kilogram_force",
    name: "Kilogram Force",
    symbol: "kgf",
    category: "force",
    toBase: (v) => v * 9.80665,
    fromBase: (v) => v / 9.80665,
  },

  { id: "newton_meter", name: "Newton Meter", symbol: "N⋅m", category: "torque", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "foot_pound",
    name: "Foot Pound",
    symbol: "ft⋅lb",
    category: "torque",
    toBase: (v) => v * 1.35582,
    fromBase: (v) => v / 1.35582,
  },

  {
    id: "meter_per_second_squared",
    name: "Meter per Second Squared",
    symbol: "m/s²",
    category: "acceleration",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "foot_per_second_squared",
    name: "Foot per Second Squared",
    symbol: "ft/s²",
    category: "acceleration",
    toBase: (v) => v * 0.3048,
    fromBase: (v) => v / 0.3048,
  },
  {
    id: "g_force",
    name: "G-Force",
    symbol: "g",
    category: "acceleration",
    toBase: (v) => v * 9.80665,
    fromBase: (v) => v / 9.80665,
  },

  { id: "lux", name: "Lux", symbol: "lx", category: "illuminance", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "foot_candle",
    name: "Foot Candle",
    symbol: "fc",
    category: "illuminance",
    toBase: (v) => v * 10.764,
    fromBase: (v) => v / 10.764,
  },

  {
    id: "candela_per_square_meter",
    name: "Candela per Square Meter",
    symbol: "cd/m²",
    category: "luminance",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  { id: "nit", name: "Nit", symbol: "nt", category: "luminance", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "foot_lambert",
    name: "Foot Lambert",
    symbol: "fL",
    category: "luminance",
    toBase: (v) => v * 3.426,
    fromBase: (v) => v / 3.426,
  },

  { id: "becquerel", name: "Becquerel", symbol: "Bq", category: "radioactivity", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "curie",
    name: "Curie",
    symbol: "Ci",
    category: "radioactivity",
    toBase: (v) => v * 37000000000,
    fromBase: (v) => v / 37000000000,
  },

  {
    id: "decibel_spl",
    name: "Decibel (SPL)",
    symbol: "dB SPL",
    category: "sound",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  {
    id: "decibel_a",
    name: "Decibel A-weighted",
    symbol: "dB(A)",
    category: "sound",
    toBase: (v) => v,
    fromBase: (v) => v,
  },

  { id: "ampere", name: "Ampere", symbol: "A", category: "electrical", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "milliampere",
    name: "Milliampere",
    symbol: "mA",
    category: "electrical",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },
  { id: "volt", name: "Volt", symbol: "V", category: "electrical", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilovolt",
    name: "Kilovolt",
    symbol: "kV",
    category: "electrical",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  { id: "ohm", name: "Ohm", symbol: "Ω", category: "electrical", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "kilohm",
    name: "Kilohm",
    symbol: "kΩ",
    category: "electrical",
    toBase: (v) => v * 1000,
    fromBase: (v) => v / 1000,
  },
  {
    id: "megohm",
    name: "Megohm",
    symbol: "MΩ",
    category: "electrical",
    toBase: (v) => v * 1000000,
    fromBase: (v) => v / 1000000,
  },

  { id: "tesla", name: "Tesla", symbol: "T", category: "magnetic", toBase: (v) => v, fromBase: (v) => v },
  {
    id: "gauss",
    name: "Gauss",
    symbol: "G",
    category: "magnetic",
    toBase: (v) => v / 10000,
    fromBase: (v) => v * 10000,
  },
  { id: "weber", name: "Weber", symbol: "Wb", category: "magnetic", toBase: (v) => v, fromBase: (v) => v },

  {
    id: "pascal_second",
    name: "Pascal Second",
    symbol: "Pa⋅s",
    category: "viscosity",
    toBase: (v) => v,
    fromBase: (v) => v,
  },
  { id: "poise", name: "Poise", symbol: "P", category: "viscosity", toBase: (v) => v / 10, fromBase: (v) => v * 10 },
  {
    id: "centipoise",
    name: "Centipoise",
    symbol: "cP",
    category: "viscosity",
    toBase: (v) => v / 1000,
    fromBase: (v) => v * 1000,
  },

  // Currency (placeholder structure)
  { id: "usd", name: "US Dollar", symbol: "$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "eur", name: "Euro", symbol: "€", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "gbp", name: "British Pound", symbol: "£", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "jpy", name: "Japanese Yen", symbol: "¥", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "cad", name: "Canadian Dollar", symbol: "C$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "aud", name: "Australian Dollar", symbol: "A$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "chf", name: "Swiss Franc", symbol: "CHF", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "cny", name: "Chinese Yuan", symbol: "¥", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "inr", name: "Indian Rupee", symbol: "₹", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "krw", name: "South Korean Won", symbol: "₩", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "nok", name: "Norwegian Krone", symbol: "kr", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "sek", name: "Swedish Krona", symbol: "kr", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "dkk", name: "Danish Krone", symbol: "kr", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "pln", name: "Polish Zloty", symbol: "zł", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "czk", name: "Czech Koruna", symbol: "Kč", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "huf", name: "Hungarian Forint", symbol: "Ft", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "ron", name: "Romanian Leu", symbol: "lei", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "bgn", name: "Bulgarian Lev", symbol: "лв", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "hrk", name: "Croatian Kuna", symbol: "kn", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "try", name: "Turkish Lira", symbol: "₺", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "rub", name: "Russian Ruble", symbol: "₽", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "uah", name: "Ukrainian Hryvnia", symbol: "₴", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "ils", name: "Israeli Shekel", symbol: "₪", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "aed", name: "UAE Dirham", symbol: "د.إ", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "sar", name: "Saudi Riyal", symbol: "﷼", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "qar", name: "Qatari Riyal", symbol: "﷼", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "kwd", name: "Kuwaiti Dinar", symbol: "د.ك", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "bhd", name: "Bahraini Dinar", symbol: ".د.ب", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "omr", name: "Omani Rial", symbol: "﷼", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "jod", name: "Jordanian Dinar", symbol: "د.ا", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "egp", name: "Egyptian Pound", symbol: "£", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "zar", name: "South African Rand", symbol: "R", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "ngn", name: "Nigerian Naira", symbol: "₦", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "kes", name: "Kenyan Shilling", symbol: "KSh", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "ghs", name: "Ghanaian Cedi", symbol: "₵", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "brl", name: "Brazilian Real", symbol: "R$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "mxn", name: "Mexican Peso", symbol: "$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "ars", name: "Argentine Peso", symbol: "$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "clp", name: "Chilean Peso", symbol: "$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "cop", name: "Colombian Peso", symbol: "$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "pen", name: "Peruvian Sol", symbol: "S/", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "uyu", name: "Uruguayan Peso", symbol: "$U", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "pyg", name: "Paraguayan Guarani", symbol: "Gs", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "bob", name: "Bolivian Boliviano", symbol: "$b", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "sgd", name: "Singapore Dollar", symbol: "S$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "hkd", name: "Hong Kong Dollar", symbol: "HK$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "twd", name: "Taiwan Dollar", symbol: "NT$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "thb", name: "Thai Baht", symbol: "฿", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "vnd", name: "Vietnamese Dong", symbol: "₫", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "idr", name: "Indonesian Rupiah", symbol: "Rp", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "myr", name: "Malaysian Ringgit", symbol: "RM", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "php", name: "Philippine Peso", symbol: "₱", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "nzd", name: "New Zealand Dollar", symbol: "NZ$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "pkr", name: "Pakistani Rupee", symbol: "₨", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "bdt", name: "Bangladeshi Taka", symbol: "৳", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "lkr", name: "Sri Lankan Rupee", symbol: "₨", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "mmk", name: "Myanmar Kyat", symbol: "K", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "khr", name: "Cambodian Riel", symbol: "៛", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "lak", name: "Laotian Kip", symbol: "₭", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "bnd", name: "Brunei Dollar", symbol: "B$", category: "currency", toBase: (v) => v, fromBase: (v) => v },
  { id: "mnt", name: "Mongolian Tugrik", symbol: "₮", category: "currency", toBase: (v) => v, fromBase: (v) => v },
]

// Popular conversion pairs for quick access
export const popularPairs = [
  { from: "centimeter", to: "inch", label: "cm → inch" },
  { from: "inch", to: "centimeter", label: "inch → cm" },
  { from: "meter", to: "foot", label: "m → ft" },
  { from: "foot", to: "meter", label: "ft → m" },
  { from: "kilometer", to: "mile", label: "km → mile" },
  { from: "mile", to: "kilometer", label: "mile → km" },
  { from: "kilogram", to: "pound", label: "kg → lb" },
  { from: "pound", to: "kilogram", label: "lb → kg" },
  { from: "celsius", to: "fahrenheit", label: "°C → °F" },
  { from: "fahrenheit", to: "celsius", label: "°F → °C" },
  { from: "liter", to: "gallon_us", label: "L → gal US" },
  { from: "gallon_us", to: "liter", label: "gal US → L" },
  { from: "psi", to: "bar", label: "psi → bar" },
  { from: "bar", to: "psi", label: "bar → psi" },
  { from: "meter_per_second", to: "kilometer_per_hour", label: "m/s → km/h" },
  { from: "kilometer_per_hour", to: "mile_per_hour", label: "km/h → mph" },
  { from: "watt", to: "horsepower", label: "W → hp" },
  { from: "joule", to: "calorie", label: "J → cal" },
  { from: "gigabyte", to: "gibibyte", label: "GB → GiB" },
  { from: "degree", to: "radian", label: "° → rad" },
]

// Helper functions
export function getUnitById(id: string): Unit | undefined {
  return units.find((unit) => unit.id === id)
}

export function getUnitsByCategory(categoryId: string): Unit[] {
  return units.filter((unit) => unit.category === categoryId)
}

export function getCategoryById(id: string): Category | undefined {
  return categories.find((category) => category.id === id)
}

export function searchUnits(query: string): Unit[] {
  const lowercaseQuery = query.toLowerCase()
  return units.filter(
    (unit) =>
      unit.name.toLowerCase().includes(lowercaseQuery) ||
      unit.symbol.toLowerCase().includes(lowercaseQuery) ||
      unit.id.toLowerCase().includes(lowercaseQuery) ||
      unit.aliases?.some((alias) => alias.toLowerCase().includes(lowercaseQuery)),
  )
}
